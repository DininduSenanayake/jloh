#!/usr/bin/env Rscript

# libraries

suppressWarnings({

library(ggplot2)
library(reshape2)
library(hash)
library(scales)

})

args <- commandArgs(trailingOnly=T)
infile <- args[1]
outdir <- args[2]
plotType <- args[3]
plotOrder <- args[4]
myRatio <- as.numeric(args[5])
myWidth <- as.numeric(args[6])
myHeight <- as.numeric(args[7])
myRes <- as.numeric(args[8])
myRef <- args[9]
myAlt <- args[10]
het_color <- args[11]
ref_color <- args[12]
alt_color <- args[13]
midpoint_color <- args[14]

# read input file
dir.create(outdir, showWarnings = FALSE)
df <- read.table(infile, header=T)

# read plot order 
plotOrder <- rev(unlist(strsplit(plotOrder, ",", fixed=T)))

# fix positions and names 
df$W_start <- df$W_start / 1000000
df$W_end <- df$W_end / 1000000  
df$Sample <- factor(as.character(df$Sample), levels=plotOrder)
df$LOH_propensity <- df$LOH_ratio - df$Het_ratio 

if (plotType == "by_chromosome") {

    # identify chromosomes 
    Chroms <- unique(as.character(df$Chromosome))
    chrom_counter = 0

    # iterate by chromosome
    for (chrom in Chroms) {

        chrom_counter = chrom_counter + 1
        print(paste("Working on chromosome ", chrom_counter, " out of ", length(Chroms), sep=""))

        df_chr <- df[df$Chromosome==chrom, ]
        df_chr$Chromosome <- factor(df_chr$Chromosome, levels=unique(df_chr$Chromosome))

        x <- df_chr[ , c("Sample", "W_end", "LOH_propensity")]

        P1 <- ggplot(data=x, aes(x=W_end, y=Sample, fill=LOH_propensity)) +
        theme_bw() +
        theme(aspect.ratio=myRatio,
              axis.text=element_text(family="Helvetica", face="plain", size=8),
              axis.title=element_text(family="Helvetica", face="plain", size=9),
              legend.text=element_text(family="Helvetica", face="italic", size=7),
              legend.title=element_text(family="Helvetica", face="plain", size=9),
              plot.title=element_text(family="Helvetica", face="plain", size=9)) +
        geom_tile() +
        xlab("Position [Mbp]") +
        scale_fill_gradient2(low=het_color, mid=midpoint_color, high=ref_color, midpoint=0,
                            na.value = "grey50", breaks=c(-1,1), limits=c(-1,1),
                            labels=c("Het", "LOH"), 
                            name="") +
        ylab("")

        outfile <- paste(chrom, "LOH", "png", sep=".")
        out <- paste(outdir, outfile, sep="/")
        png(out, height=myHeight, width=myWidth, res=myRes, units="px")
        plot(P1)
        dev.off()
    }

} else if (plotType == "by_sample") {
   
    # identify samples
    Samples <- unique(as.character(df$Sample))
    sample_counter = 0

    # iterate by sample
    for (sample in Samples) {

        sample_counter = sample_counter + 1
        print(paste("Working on sample ", sample_counter, " out of ", length(Samples), sep=""))

        df_smp <- df[df$Sample==sample, ]
        df_smp$Sample <- factor(df_smp$Sample, levels=unique(df_smp$Sample))
        df_smp$Chromosome <- factor(df_smp$Chromosome, levels=unique(df_smp$Chromosome))

        x <- df[ , c("Chromosome", "W_end", "LOH_propensity")]

        P1 <- ggplot(data=x, aes(x=W_end, y=Chromosome, fill=LOH_propensity)) +
        theme_bw() +
        theme(aspect.ratio=myRatio,
            axis.text=element_text(family="Helvetica", face="plain", size=8),
            axis.title=element_text(family="Helvetica", face="plain", size=9),
            legend.text=element_text(family="Helvetica", face="italic", size=7),
            legend.title=element_text(family="Helvetica", face="plain", size=9),
            plot.title=element_text(family="Helvetica", face="plain", size=9)) +
        geom_tile() +
        xlab("Position [Mbp]") +
        scale_fill_gradient2(low=het_color, mid=midpoint_color, high=ref_color, midpoint=0,
                            na.value = "grey50", breaks=c(-1,1), limits=c(-1,1),
                            labels=c("Het", "LOH"), 
                            name="") +
        ylab("")

        outfile <- paste(sample, "LOH", "png", sep=".")
        out <- paste(outdir, outfile, sep="/")
        png(out, height=myHeight, width=myWidth, res=myRes, units="px")
        plot(P1)
        dev.off()
    }
}