#!/usr/bin/env python3

"""
###
JLOH - Inferring Loss of Heterozygosity Blocks from Short-read sequencing data

Copyright (C) 2023 Matteo Schiavinato

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
###
"""


import argparse as ap 
import pandas as pd 
import sys 
import os 
import multiprocessing as mp
from time import asctime as at 
from pandarallel import pandarallel

# help section
if len(sys.argv) == 1:
    sys.argv.append("--help")

if (sys.argv[1] in ["--help", "-h", "-help", "help", "getopt", "usage"]):
    sys.stderr.write("""

Plot LOH propensity over all or specific chromosomes from multiple JLOH extract 
TSV output files  

Usage:
jloh plot --loh <TSV_1> ... <TSV_n> --names <STR_1> ... <STR_n> [options]


[modes]
--one-ref           Plot LOH vs Het propensity (use --het in combination)       [off]
--two-ref           Plot LOH towards genome A vs B                              [off]

[parameters]
--loh               Files to plot (ending in *LOH_blocks.tsv)                   [!]
--loh-files         File with input LOH files (one per row)                     [off]
--names-file        File with names to assign to samples, one per row           [off]
                    tab-separated, with input filename  
                    (e.g. MyInputLOHFile.tsv      MySampleName)
--output-dir        Output directory (created if non-existent)                  [jloh_out]
--prefix            Output files prefix                                         [plot]
--het               Input BED file containing het regions from JLOH extract     [!]
                    For "--one-ref" mode only 
--ref-name          Name to label the reference allele                          [REF]
--alt-name          Name to label the alternative allele                        [ALT]
--by-sample         Use "by sample" mode (each plot is a different sample)      [off]
                    Plots will be organised by sample rather than by chromosome
--merge             The output plot combines all chromosomes into one           [off]
--clusters          "clust" file from jloh cluster to define plotting order     [off]
--threads           Number of parallel threads                                  [12]
--chr               Restrict the analysis to this specific chromosome           [off]
--chr-file          Indicate multiple chromosomes, one per row                  [off]
--window-size       Size of window for plotting, the shorter the slower         [10000]

[R/ggplot2 options]
--r-exec            R executable name to run plotting scripts                   [Rscript] 
--aspect-ratio      Ratio between y / x for the output plot                     [0.35]
--width             Width (px) of the output plot                               [2000]
--height            Height (px) of the output plot                              [750]
--res               Resolution of the output plot                               [250]
--het-color         Color to use to represent heterozygous blocks               [#F7C35C]
--ref-color         Color to use to represent REF blocks                        [#EF6F6C]
                    This color is also used to show LOH in --one-ref mode
--alt-color         Color to use to represent ALT blocks                        [#64B6AC]
--midpoint-color    Color to use when undecided between het/REF/ALT             [#ffffff]
--contrast          Increase contrast for samples with few LOH blocks           [off]
                    Choose one of: off, low, mid, high, max
                    Currently available for --one-ref only 

""")
    sys.exit(0)


# parser 
p = ap.ArgumentParser()
p.add_argument("--one-ref", action="store_true")
p.add_argument("--two-ref", action="store_true")
p.add_argument("--by-sample", action="store_true")
p.add_argument("--loh", nargs="+")
p.add_argument("--loh-files")
p.add_argument("--clusters")
p.add_argument("--merge", action="store_true")
p.add_argument("--het", nargs="+")
p.add_argument("--names-file")
p.add_argument("--ref-name", default="REF")
p.add_argument("--alt-name", default="ALT")
p.add_argument("--chr", default="ALL")
p.add_argument("--chr-file")
p.add_argument("--window-size", default=10000, type=int)
p.add_argument("--threads", type=int, default=12)
p.add_argument("--output-dir", default="jloh_out")
p.add_argument("--prefix", default="plot")
p.add_argument("--r-exec", default="Rscript", type=str)
p.add_argument("--aspect-ratio", default=0.35, type=float)
p.add_argument("--width", default=2000, type=int)
p.add_argument("--height", default=750, type=int)
p.add_argument("--res", default=250, type=int)
p.add_argument("--het-color", default="#F7C35C", type=str)
p.add_argument("--ref-color", default="#EF6F6C", type=str)
p.add_argument("--alt-color", default="#64B6AC", type=str)
p.add_argument("--midpoint-color", default="#ffffff", type=str)
p.add_argument("--contrast", choices=["off", "low", "mid", "high", "max"], default="off")
args = p.parse_args()

# env 
ss = sys.exit 
pandarallel.initialize(progress_bar=False, nb_workers=args.threads, use_memory_fs=False)

# functions 
def check_conditions(args):

    if  (args.one_ref and args.two_ref) or \
        (not args.one_ref and not args.two_ref):
        sys.exit("""

ERROR: you should use either --one-ref or --two-ref 

""")

    if (args.one_ref or args.two_ref) and not (args.loh or args.loh_files):
        sys.exit("""

ERROR: No --loh files were passed 

""")
                 
    if (args.chr_file):
        args.chr = None 


def organise_input(loh, names, het, run_mode):

    """
    Last update: 12/05/2023 
    """

    if run_mode == "one_ref":

        if (len(loh) != len(names)):
            sys.stderr.write("ERROR: number of LOH files (--loh) doesn't match number of names (--names)\n")
            ss()

        if (len(loh) != len(het)):
            sys.stderr.write("ERROR: number of LOH files (--loh) doesn't match number of heterozygosity files (--het)\n")
            ss()

        Files = []
        i = 0
        while (i < len(loh)):
            Files.append([names[i], loh[i], het[i]])
            i+=1

        for x in Files:
            sample_id = x[0]
            infile = x[1]
            hetfile = x[2]

            df_sub = pd.read_csv(infile, sep="\t")
            df_sub.insert(loc=0, column="Sample", value=sample_id)
            df_sub = df_sub.rename({"#Chrom":"Chromosome"}, axis=1)

            df_sub_het = pd.read_csv(hetfile, sep="\t", header=None, usecols=[0,1,2])
            df_sub_het.columns = ["Chromosome", "Start", "End"]
            df_sub_het.insert(loc=0, column="Sample", value=sample_id)            

            try:
                # if dfs exist, append to them 
                df = pd.concat([df, df_sub])
                df_het = pd.concat([df_het, df_sub_het])
            except NameError:
                # if these two don't exist yet, create them 
                df = df_sub.copy()
                df_het = df_sub_het.copy()


    elif run_mode == "two_ref":

        if (len(loh) != len(names)):
            sys.stderr.write("ERROR: number of LOH files (--loh) doesn't match number of names (--names)\n")
            ss()

        df_het = None

        Files = []
        i = 0
        while (i < len(loh)):
            Files.append([names[i], loh[i]])
            i+=1

        for x in Files:
            sample_id = x[0]
            infile = x[1]

            df_sub = pd.read_csv(infile, sep="\t")
            df_sub.insert(loc=0, column="Sample", value=sample_id)
            df_sub = df_sub.rename({"#Chrom":"Chromosome"}, axis=1)

            try:
                # if dfs exist, append to them 
                df = pd.concat([df, df_sub])
            except NameError:
                # if these two don't exist yet, create them 
                df = df_sub.copy()

    return df, df_het 


def sort_input_files(args):

    """
    10/08/2023
    """

    # read input LOH files 
    # --------------------
    # define sorting order 
    # if there are clusters, use that 
    if args.clusters:
        df_clusters = pd.read_csv(args.clusters, header="infer", sep="\t")
        sorting_order = df_clusters["Sample"].tolist()
        Loh = []
        for x in sorting_order:
            if args.loh:
                match = [y for y in args.loh if y.split("/")[-1] == x][0]
            elif args.loh_files:
                match = [y.rstrip("\b\r\n") for y in open(args.loh_files, "r") if y.rstrip("\b\r\n").split("/")[-1] == x][0]

            Loh.append(match)

    # if not, use input files as provided 
    else:
        if args.loh:
            Loh = [x for x in args.loh]
        elif args.loh_files:
            Loh = [y.rstrip("\n\r\b") for y in open(args.loh_files, "r")]

    # reading names 
    # -------------
    # creating dictionary with filename without path 
    # so it matches the way args.clusters represents the filename 
    # N.B. also without args.clusters files are represented without path 
    if args.names_file:
        Lst = [row.rstrip("\b\r\n").split("\t") for row in open(args.names_file, "r")]
        Names_dict = { x[0].split("/")[-1]:x[1] for x in Lst }
        Names = []
        for x in Loh:
            Names.append(Names_dict[x.split("/")[-1]])

    # if not provided, use file names 
    else:
        Names = Loh

    # read heterozygous blocks 
    # ------------------------
    # read heterozygous blocks from --het argument 
    # input files should be in the same order of the --loh files 
    # it's on the user to make sure this is the case 
    if args.one_ref:
        Het = args.het 
    
    # with --two-ref we don't use heterozygous blocks 
    elif args.two_ref:
        Het = None

    return Loh, Names, Het


def select_specific_chromosomes(df, df_het, args, run_mode):

    """
    10/08/2023
    """

    if run_mode == "one_ref":

        if args.chr_file:
            sys.stderr.write(f"[{at()}] Selecting chromosomes from file {args.chr_file}\n")
            Chroms = [x.rstrip("\n\b\r") for x in open(args.chr_file, "r")]
            df = df.loc[df["Chromosome"].isin(Chroms), :]
            df_het = df_het.loc[df_het["Chromosome"].isin(Chroms), :]

        elif (args.chr) and (args.chr != "ALL"):
            sys.stderr.write(f"[{at()}] Selecting only chromosome {args.chr}\n")
            df = df.loc[df["Chromosome"]==args.chr, :]
            df_het = df_het.loc[df_het["Chromosome"]==args.chr, :]

        if df.shape[0] == 0:
            sys.stderr.write(f"""
            
    ERROR: dataframe is empty after selecting only chromosome {args.chr}\n

    """)
            ss()

    elif run_mode == "two_ref":

        if args.chr_file:
            sys.stderr.write(f"[{at()}] Selecting chromosomes from file {args.chr_file}\n")
            Chroms = [x.rstrip("\n\b\r") for x in open(args.chr_file, "r")]
            df = df.loc[df["Chromosome"].isin(Chroms), :]

            if df.shape[0] == 0:
                sys.stderr.write(f"\n\nERROR: dataframe is empty after selecting only chromosomes in {args.chr_file}\n\n")
                ss()

        elif (args.chr) and (args.chr != "ALL"):
            sys.stderr.write(f"[{at()}] Selecting only chromosome {args.chr}\n")
            df = df.loc[df["Chromosome"]==args.chr, :]

            if df.shape[0] == 0:
                sys.stderr.write(f"\n\nERROR: dataframe is empty after selecting only chromosome {args.chr}\n\n")
                ss()
    
    return df, df_het


def split_into_windows(df_sub, w_size, q, args):

    """
    Last update: 18/04/2023
    """

    start, end = df_sub["Start"], df_sub["End"]
    w_start = start - (start % w_size)
    w_end = w_start + w_size

    if (w_start <= start <= w_end) and (w_start <= end <= w_end):
        df_sub["Window"] = (w_start, w_end)
        df_sub["LOH_pos"] = df_sub["End"] - df_sub["Start"]
        q.put(df_sub)

    elif (w_start <= start <= w_end) and (end > w_end):
        out = []
        df_tmp = df_sub.copy()
        df_tmp.End = w_end
        df_tmp["Window"] = (w_start, w_end)
        df_tmp["LOH_pos"] = df_tmp["End"] - df_tmp["Start"]
        out.append(df_tmp.copy())

        while (end > w_end):
            w_start += w_size
            w_end += w_size
            df_tmp.Start = max(start, w_start)
            df_tmp.End = min(end, w_end)
            df_tmp["Window"] = (w_start, w_end)
            df_tmp["LOH_pos"] = df_tmp["End"] - df_tmp["Start"]
            out.append(df_tmp.copy())

        for x in out:
            q.put(x)

    elif (start < w_start) and (start <= end <= w_end):
        sys.stderr.write("ERROR: debug!\n")
        sys.exit()

    elif (start < w_start) and (end > w_end):
        sys.stderr.write("ERROR: debug!\n")
        sys.exit()


def split_into_windows_het(df_het, w_size, q, args):

    """
    Last update: 12/05/2023
    """

    start, end = df_het["Start"], df_het["End"]
    w_start = start - (start % w_size)
    w_end = w_start + w_size

    if (w_start <= start <= w_end) and (w_start <= end <= w_end):
        df_het["Window"] = (w_start, w_end)
        df_het["Het_pos"] = df_het["End"] - df_het["Start"]
        q.put(df_het)

    elif (w_start <= start <= w_end) and (end > w_end):
        out = []
        df_tmp = df_het.copy()
        df_tmp.End = w_end
        df_tmp["Window"] = (w_start, w_end)
        df_tmp["Het_pos"] = df_tmp["End"] - df_tmp["Start"]
        out.append(df_tmp.copy())

        while (end > w_end):
            w_start += w_size
            w_end += w_size
            df_tmp.Start = max(start, w_start)
            df_tmp.End = min(end, w_end)
            df_tmp["Window"] = (w_start, w_end)
            df_tmp["Het_pos"] = df_tmp["End"] - df_tmp["Start"]
            out.append(df_tmp.copy())

        for x in out:
            q.put(x)

    elif (start < w_start) and (start <= end <= w_end):
        sys.stderr.write("ERROR: debug!\n")
        sys.exit()

    elif (start < w_start) and (end > w_end):
        sys.stderr.write("ERROR: debug!\n")
        sys.exit()


def count_ratios_oneref(df_sub, w_size, df_het):

    """
    18/04/2023
    """

    sample = df_sub.loc[:,"Sample"].tolist()[0]
    chrom = df_sub.loc[:,"Chromosome"].tolist()[0]
    window = df_sub.loc[:,"Window"].tolist()[0]
    
    df_sub_het = df_het.loc[(df_het["Sample"]==sample) &
                            (df_het["Chromosome"]==chrom) &
                            (df_het["Window"]==window), :]
    
    
    if df_sub_het.shape[0] > 0:
        df_sub_het = df_sub_het.loc[:,["Het_pos"]].sum()
        het_pos = df_sub_het["Het_pos"]
        het_ratio = het_pos / w_size 

    else:
        het_pos = 0
        het_ratio = 0
        
    if df_sub.shape[0] > 0:
        df_sub = df_sub.loc[:,["LOH_pos"]].sum()
        loh_pos = df_sub["LOH_pos"]
        loh_ratio = loh_pos / w_size 
        
    else:
        loh_pos = 0
        loh_ratio = 0

    s = pd.Series(
    {
    "Het_pos":het_pos, "Het_ratio":het_ratio, 
    "LOH_pos":loh_pos, "LOH_ratio":loh_ratio
        }
    )

    return s


def count_ratios_tworef(df_sub, w_size):

    """
    18/04/2023
    """

    window = df_sub.loc[:,"Window"].tolist()[0]

    df_sub = df_sub.loc[:,["Allele", "Window", "LOH_pos"]].groupby(["Allele"]).sum().loc[:,["LOH_pos"]]
    df_sub = df_sub.reset_index(drop=False)
    df_sub["LOH_ratio"] = df_sub["LOH_pos"] / w_size
    df_sub["W_start"] = window[0]
    df_sub["W_end"] = window[1]

    for loh_type in ["REF", "ALT"]:
        if loh_type not in df_sub["Allele"].tolist():
            df_sub = df_sub.append({"Allele":loh_type, "LOH_pos":0, "LOH_ratio":0, "W_start":window[0], "W_end":window[1]}, ignore_index=True)

    df_sub = df_sub.set_index("Allele")
    
    d = {   "LOH_pos_REF" : [df_sub.loc["REF", "LOH_pos"]],
            "LOH_ratio_REF" : [df_sub.loc["REF", "LOH_ratio"]],
            "LOH_pos_ALT" : [df_sub.loc["ALT", "LOH_pos"]],
            "LOH_ratio_ALT" : [df_sub.loc["ALT", "LOH_ratio"]] }

    df_sub = pd.DataFrame.from_dict(d)
    return df_sub


def quantize_heterozygosity(df_het, window_size, threads, args):

    """
    12/05/2023
    """

    # read heterozygosity and quantize it 
    pool = mp.Pool(processes=threads)
    q = mp.Manager().Queue()

    num_rows = df_het.shape[0]
    k=0
    
    for index, row in df_het.iterrows():
        k+=1
        completion = round(k/num_rows*100, 2)
        sys.stderr.write(f"Parsing rows: {completion}%        \r")
        pool.apply_async(split_into_windows_het, args=(row, window_size, q, args))

    pool.close()
    pool.join()
    sys.stderr.write("\n")

    out = []
    while q.empty() == False:
        out.append(q.get())

    sys.stderr.write(f"[{at()}] Sorting by genome coordinate\n")
    df_het = pd.DataFrame(out).sort_values(by=["Sample", "Chromosome", "Window"])

    df_het = df_het.rename({"LOH_pos":"Het_pos"}, axis=1)
    df_het = df_het.loc[:,["Sample", "Chromosome", "Window", "Het_pos"]]

    return df_het 


def quantize_intervals(df, df_het, window_size, threads, run_mode, args):

    """
    Last update: 12/05/2023 
    """

    # quantize windows 
    pool = mp.Pool(processes=threads)
    q = mp.Manager().Queue()

    num_rows = df.shape[0]
    k=0

    for index, row in df.iterrows():
        k+=1
        completion = round(k/num_rows*100, 2)
        sys.stderr.write(f"Parsing rows: {completion}%        \r")
        pool.apply_async(split_into_windows, args=(row, window_size, q, args))

    pool.close()
    pool.join()
    sys.stderr.write("\n")

    out = []
    while q.empty() == False:
        out.append(q.get())

    sys.stderr.write(f"[{at()}] Sorting by genome coordinate\n")
    df = pd.DataFrame(out).sort_values(by=["Sample", "Chromosome", "Window"])

    if run_mode == "one_ref":
        df = df.loc[:,["Sample", "Chromosome", "Window", "LOH_pos"]]
        df = df.groupby(["Sample", "Chromosome", "Window"]).parallel_apply(lambda df_sub : count_ratios_oneref(df_sub, window_size, df_het))

    elif run_mode == "two_ref":
        df = df.groupby(["Sample", "Chromosome", "Window"]).parallel_apply(lambda df_sub : count_ratios_tworef(df_sub, window_size))
        df = df.reset_index(drop=False)        
        
    return df


def reorganise_output_dataframe(df, run_mode, args):

    """
    Last update: 12/05/2023
    """

    if run_mode == "one_ref":

        df = df.reset_index(drop=False)
        df["W_start"] = df["Window"].str[0]
        df["W_end"] = df["Window"].str[1]
        df = df.loc[:,[ "Sample", "Chromosome", "W_start", "W_end", 
                        "Het_pos", "Het_ratio", "LOH_pos", "LOH_ratio"]]

    elif run_mode == "two_ref":

        df = df.reset_index(drop=False)
        df["W_start"] = df["Window"].str[0]
        df["W_end"] = df["Window"].str[1]
        df = df.loc[:,[ "Sample", "Chromosome", "W_start", "W_end", 
                        "LOH_pos_REF", "LOH_ratio_REF", "LOH_pos_ALT", "LOH_ratio_ALT"]]

    return df 


def fill_missing_windows(df, run_mode, args):

    """
    12/05/2023
    """

    if run_mode == "one_ref":

        w_start = 0
        w_end = w_start + args.window_size 
        chrom_old = "BEGIN"
        sample_old = "BEGIN"

        Rows_to_add = []

        for index, row in df.iterrows():

            # set initial variables 
            if (chrom_old == "BEGIN") and (sample_old == "BEGIN"):
                chrom_old = row["Chromosome"]
                sample_old = row["Sample"]

            # if chrom and sample are the same
            # iterate while loop until reaching first window 
            if (row["Chromosome"] == chrom_old) and \
               (row["Sample"] == sample_old):
                
                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            args.window_size, float(1), 
                            0, float(0) ]

                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
            
            # if chrom is different but sample is the same 
            # simply restart count for chromosome windows 
            elif    (row["Chromosome"] != chrom_old) and \
                    (row["Sample"] == sample_old):
            
                w_start = 0 
                w_end = w_start + args.window_size 

                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            args.window_size, float(1), 
                            0, float(0) ]

                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
                            
            # if sample is different 
            # chromosome can be the same or different but it doesn't matter 
            # the count must be restarted 
            elif    (row["Sample"] != sample_old):
                
                w_start = 0
                w_end = w_start + args.window_size 
                
                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            args.window_size, float(1), 
                            0, float(0) ]

                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
                

            # reset variables 
            chrom_old = row["Chromosome"]
            sample_old = row["Sample"]


        df_new = pd.DataFrame(Rows_to_add)
        df_new.columns = ["Sample", "Chromosome", "W_start", "W_end", "Het_pos", "Het_ratio", "LOH_pos", "LOH_ratio"]

        df = pd.concat([df, df_new]).sort_values(by=["Sample", "Chromosome", "W_start", "W_end"])


    elif run_mode == "two_ref":
        
        w_start = 0
        w_end = w_start + args.window_size 
        chrom_old = "BEGIN"
        sample_old = "BEGIN"

        Rows_to_add = []

        for index, row in df.iterrows():

            # set initial variables 
            if (chrom_old == "BEGIN") and (sample_old == "BEGIN"):
                chrom_old = row["Chromosome"]
                sample_old = row["Sample"]

            # if chrom and sample are the same
            # iterate while loop until reaching first window 
            if (row["Chromosome"] == chrom_old) and \
               (row["Sample"] == sample_old):

                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            0, float(0), 0, float(0) ]
                        
                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
            
            # if chrom is different but sample is the same 
            # simply restart count for chromosome windows 
            elif    (row["Chromosome"] != chrom_old) and \
                    (row["Sample"] == sample_old):
            
                w_start = 0 
                w_end = w_start + args.window_size 

                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            0, float(0), 0, float(0) ]
                        
                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
                            
            # if sample is different 
            # chromosome can be the same or different but it doesn't matter 
            # the count must be restarted 
            elif    (row["Sample"] != sample_old):
                
                w_start = 0
                w_end = w_start + args.window_size 
                
                if w_end <= row["W_start"]:

                    while w_end <= row["W_start"]:
                        New = [row["Sample"], row["Chromosome"], 
                            w_start, w_end, 
                            0, float(0), 0, float(0) ]
                        
                        s = pd.Series(New)
                        Rows_to_add.append(s)

                        w_start += args.window_size 
                        w_end += args.window_size 

                w_start += args.window_size 
                w_end += args.window_size 
                
            # reset variables 
            chrom_old = row["Chromosome"]
            sample_old = row["Sample"]


        df_new = pd.DataFrame(Rows_to_add)
        df_new.columns = ["Sample", "Chromosome", "W_start", "W_end", "LOH_pos_REF", "LOH_ratio_REF", "LOH_pos_ALT", "LOH_ratio_ALT"]

        df = pd.concat([df, df_new]).sort_values(by=["Sample", "Chromosome", "W_start", "W_end"])

    return df 



def run_one_ref_script(loh_table, Names, args):

    """
    10/08/2023
    """

    if args.by_sample:
        plot_type = "by_sample"
    else:
        plot_type = "by_chromosome"

    if args.merge:
        do_we_merge = "yes"
    else:
        do_we_merge = "no"

    # plot 
    sys.stderr.write(f"[{at()}] Plotting\n")
    src_dir = "/".join(sys.argv[0].split("/")[0:-1]) + "/" + "scripts"
    cmd = " ".join([
        str(args.r_exec), 
        f"{src_dir}/loh-bin-plots_one-ref.Rscript", 
        str(loh_table), 
        f"{args.output_dir}/plots",
        str(plot_type), 
        str(",".join(Names)),
        f"{str(args.aspect_ratio)},{str(args.width)},{str(args.height)},{str(args.res)}",
        f"{args.ref_name},{args.alt_name}", 
        f"\{args.het_color},\{args.ref_color},\{args.alt_color},\{args.midpoint_color}",
        f"{do_we_merge}",
        args.prefix,
        args.contrast ])
    
    sys.stderr.write(f"\nPlot command that was run:\n{cmd}\n\n")
    os.system(cmd)


def run_two_ref_script(loh_table, Names, args):

    """
    10/08/2023
    """

    if args.by_sample:
        plot_type = "by_sample"
    else:
        plot_type = "by_chromosome"

    if args.merge:
        do_we_merge = "yes"
    else:
        do_we_merge = "no"

    # plot 
    sys.stderr.write(f"[{at()}] Plotting\n") 
    src_dir = "/".join(sys.argv[0].split("/")[0:-1]) + "/" + "scripts"
    cmd = " ".join([
        str(args.r_exec), f"{src_dir}/loh-bin-plots_two-ref.Rscript", 
        str(loh_table), 
        f"{args.output_dir}/plots",
        str(plot_type),
        str(",".join(Names)),
        f"{str(args.aspect_ratio)},{str(args.width)},{str(args.height)},{str(args.res)}",
        f"{args.ref_name},{args.alt_name}", 
        f"\{args.het_color},\{args.ref_color},\{args.alt_color},\{args.midpoint_color}",
        f"{do_we_merge}",
        args.prefix,
        args.contrast ])
    
    sys.stderr.write(f"\nPlot command that was run:\n{cmd}\n\n")
    os.system(cmd)


def run_oneref_mode(args):

    """
    10/08/2023
    """

    # read input files and names and sort them by cluster if provided 
    Loh, Names, Het = sort_input_files(args)

    # put information into a single dataframe 
    # create another one for heterozygosity files 
    sys.stderr.write(f"[{at()}] Reading input information\n")
    df, df_het = organise_input(Loh, Names, Het, "one_ref")

    # select specific chromosome if user wants 
    if args.chr != "ALL":
        df, df_het = select_specific_chromosomes(df, df_het, args, "one_ref")
    
    # quantize in windows 
    sys.stderr.write(f"[{at()}] Quantizing heterozygosity in windows of {args.window_size} bp\n") 
    df_het = quantize_heterozygosity(df_het, args.window_size, args.threads, args)

    sys.stderr.write(f"[{at()}] Quantizing intervals in windows of {args.window_size} bp\n") 
    df = quantize_intervals(df, df_het, args.window_size, args.threads, "one_ref", args)
    
    # reorganise output 
    df = reorganise_output_dataframe(df, "one_ref", args)

    # fill the gaps
    df = fill_missing_windows(df, "one_ref", args)
    
    # write table to output
    sys.stderr.write(f"[{at()}] Writing table to output\n") 

    loh_table = f"{args.output_dir}/{args.prefix}.LOH_rate.tsv"
    df.to_csv(loh_table, sep="\t", header=True, index=False)

    run_one_ref_script(loh_table, Names, args)


def run_tworef_mode(args):

    """
    31/05/2023
    """

    # read input files and names and sort them by cluster if provided 
    # het is useless, and in fact assigned to "None" by the function in two_ref mode
    Loh, Names, Het = sort_input_files(args)

    # read input information and put it into a single dataframe 
    # ignore heterozygosity 
    sys.stderr.write(f"[{at()}] Reading input information\n")
    df, df_het = organise_input(Loh, Names, Het, "two_ref")
    
    # select specific chromosome if user wants 
    if args.chr != "ALL":
        df, df_het = select_specific_chromosomes(df, df_het, args, "two_ref")

    # quantize in windows 
    sys.stderr.write(f"[{at()}] Quantizing in windows of {args.window_size} bp\n") 
    df = quantize_intervals(df, df_het, args.window_size, args.threads, "two_ref", args)

    # reorganise output 
    df = reorganise_output_dataframe(df, "two_ref", args)
    
    # fill the gaps
    df = fill_missing_windows(df, "two_ref", args)

    # write table to output
    sys.stderr.write(f"[{at()}] Writing table to output\n") 

    loh_table = f"{args.output_dir}/{args.prefix}.LOH_rate.tsv"
    df.to_csv(loh_table, sep="\t", header=True, index=False)

    run_two_ref_script(loh_table, Names, args)



def main(args):

    # check conditions
    check_conditions(args)

    # organise workspace
    os.makedirs(args.output_dir, exist_ok=True)

    if args.one_ref:
        run_oneref_mode(args)

    elif args.two_ref:
        run_tworef_mode(args)

    else:
        pass

# main 
if __name__ == "__main__":
    main(args)